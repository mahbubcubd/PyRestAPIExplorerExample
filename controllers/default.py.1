# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

# -------------------------------------------------------------------------
# This is a sample controller
# - index is the default action of any application
# - user is required for authentication and authorization
# - download is for downloading files uploaded in the db (does streaming)
# -------------------------------------------------------------------------

import urllib2
import json
def index():
    return locals()

def news():
    if request.vars.q:
        query=request.vars.q
        url='https://newsapi.org/v2/everything?q='+query+'&apiKey=4cb16c3e195043e19c78bf41f380b784'
        contents = urllib2.urlopen(url).read()
        js=json.loads(contents)
        art=js['articles']
        now=js['articles'][1]
        image_now=now['urlToImage']
        title_now=now['title']
        url_now=now['url']
    else:
        contents = urllib2.urlopen("https://newsapi.org/v2/top-headlines?country=us&apiKey=4cb16c3e195043e19c78bf41f380b784").read()
        js=json.loads(contents)
        art=js['articles']
        now=js['articles'][1]
        image_now=now['urlToImage']
        title_now=now['title']
        url_now=now['url']
        
    sports_api='https://newsapi.org/v2/top-headlines?sources=bbc-sport&apiKey=4cb16c3e195043e19c78bf41f380b784'
    load_sports = urllib2.urlopen(sports_api).read()
    s_json=json.loads(load_sports)
    s1=s_json['articles'][1]
    s1_img=s1['urlToImage']
    s1_title=s1['title']
    s1_url=s1['url']
    s1_description=s1['description']
    return locals()




def movie():
    base="https://api.themoviedb.org"
    return locals()

def movie_description():
    return locals()

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
